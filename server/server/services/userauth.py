# -*- coding: utf-8 -*-
"""
This file houses class that serves the app with auth related methods
"""

import logging

from passlib.context import CryptContext

import server.exceptions as exceptions


class UserAuthentication:
    """
    A namespace to put all user authentication related services
    such as passwords hashing.
    """

    # context file used to hash/verify passwords
    _context = CryptContext(
        schemes=['pbkdf2_sha256'],
        deprecated='auto'
    )

    @classmethod
    def hashPassword(cls, password):
        """
        Hashes password to be stored in database
        
        Args:
            password(str): password to hash
        Returns:
            str: hashed password
        """
        return cls._context.hash(password)

    @classmethod
    def verifyPassword(cls, password, hash):
        """
        verify password so that it matches hash
        
        Args:
            password(str): plain text password to verify
            hash(str): hashed password that plain password is matched against
        Returns:
            boolean: whether verification succeeded or not
        """
        try:
            return cls._context.verify(password, hash)
        except Exception:
            # hash generated by different context raises exception
            return False

    def __init__(self, repo, filter_class, session_manager):
        self._repo = repo
        self._filter = filter_class
        self._session = session_manager

    def login(self, formdata):
        """
        provides login service
        checks credentials against user in repo,
        and if matches put userinformation in session
        
        Args:
            formdata(dict): dictionary that contains user credentials
        Returns:
            user(dict): user found in repo
        """
        userName, password = self._extractUserNameAndPassword(formdata)
        user_indb = self._searchUserFromRepo(userName)

        if not self.verifyPassword(password, user_indb['password']):
            logging.info('Failed to verify password')
            raise exceptions.InvalidUserCredentials('Incorrect password')

        self._session.setSessionUser(user_indb)

        return self._makeSerializable(user_indb)

    def _extractUserNameAndPassword(self, formdata):
        userName = formdata.get('userName', None)
        password = formdata.get('password', None)

        if not userName or not password:
            logging.info('Invalid user credentials')
            raise exceptions.InvalidUserCredentials('Invalid credentials')

        return (userName, password)

    def _searchUserFromRepo(self, userName):
        searchFilter = self._filter.createFilter(dict(
            field='userName', operator='eq', value=[userName]
        ))
        
        result = self._repo.searchUser(searchFilter)
        try:
            return result['users'][0]
        except Exception as e:
            logging.error(e)
            raise exceptions.InvalidUserCredentials('Email not registered')

    def _makeSerializable(self, user):
        """
        remove fields that may not be serializable
        
        Args:
            user(dict): dictionary of user entity
        Returns:
            dict: serialized data
        """
        user.pop('_id', None)
        return user
